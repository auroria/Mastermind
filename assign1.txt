Assign1: Due 11:59PM February 26

Using Test First Development (no code without test first) implement the problem you designed in hw2. Feel free to evolve that design and use your judgment to make changes based on the improved understanding and learning.

Take small steps, ask for frequent reviews.

First start with a tests list and a canary test.

After completing the assignment (and only after) answer the following questions:

1. What did you learn mainly in this assignment?

Test Driven Development (TDD) offers several advantages:

- Provides a framework for agile, incremental development. Starting with small, focused tests before coding results in a well-regimented, logically-sequential, easily manageable development process.
- Building a stepwise series of tests, accelerates debugging and regression analysis. Being able to constantly run and rerun a progressive series of tests reduces the possibility for introducing hidden bugs along the way.
- It simplifies debugging by pinpointing problems as they are introduced. It prevents latent bugs from being buried only to resurface late in the development process when debugging may be difficult.
- The net result is a development process that feels more logical and secure. Code quality felt better along the way without a sense of foreboding doom that can accompany some development processes

2. How is your current design different, if at all, from the strategic design created in hw2?

The final design is much simpler that the initial strategic design. The strategic design using a Model-View-Controller paradigm and three classes was simplified to two classes: a simple model for the basic game functions
of generating a solution and testing user guesses and a combined view-controller class that handled the in-game workflow steps and Graphical User Interface. The controller functions are represented in the final design by
callback functions associated with button presses that communicate directly with the Mastermind model. The bottom-up incremental approach of Test Driven Development resulted in a more streamlined final design.

3. Were there any surprise or things you did not expect along the way? Any 
particular problem faced, things you had to tackle that you did not expect 
beforehand?

It was initially difficult to scale back from a more broad-based, code-then-test development approach, to a fine-grained, test-first methodology. It was hard to invert the development thought process to focus on tests first
and write only a very minimal amount of code in each cycle. Changing to TDD was kind of a "shock to the system," but was a very interesting learning experience. Reducing a tendency to create somewhat verbose code was a challenge.

Total [100]: 95
Program runs and able to play the game [20]:

All tests pass [20]:
Code coverage [10]:
Test quality [20]:
Design and code quality [20]: -5
Need to give good names for applications, not a generic Application1.
Also, winforms have been long replaced by WPF, let's use more recent solutions.
Also, Form3 is not a good name. Don't accept defaults given by IDE, instead program with intention and make file names and code expressive.

Avoid long functions with duplicated code.

Answer to questions [10]:
